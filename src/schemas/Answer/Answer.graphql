type Answer {
          id: String!
          response: Response!
          responseId: String!
          question: Question!
          questionId: String!
          attachments(where: AttachmentWhereInput
              orderBy: [AttachmentOrderByInput!]
              cursor: AttachmentWhereUniqueInput
              take: Int
              skip: Int
              distinct: [AttachmentScalarFieldEnum!]
              ): [Attachment!]!
          booleanValue: Boolean
          textValue: String
          createdAt: DateTime!
          updatedAt: DateTime!
    }

      type AnswerListResponse {
        status: Boolean!
        data: [Answer!]
        message: String!
      }
     

      type AnswerResponse {
        status: Boolean!
        data: Answer
        message: String!
      }
      
      type AnswerBatchResponse {
        status: Boolean!
        data: BatchPayload
        message: String!
      }
      type AggregateAnswerResponse {
        status: Boolean!
        data: AggregateAnswer
        message: String!
      }
      type AnswerCountResponse {
        status: Boolean!
        data: Int
        message: String!
      }
      extend type Query {
    findUniqueAnswer(where: AnswerWhereUniqueInput!): AnswerResponse!
    findFirstAnswer(
      where: AnswerWhereInput
      orderBy: [AnswerOrderByInput!]
      cursor: AnswerWhereUniqueInput
      distinct: [AnswerScalarFieldEnum!]
      skip: Int
      take: Int
    ): AnswerResponse!
    findManyAnswer(
      where: AnswerWhereInput
      orderBy: [AnswerOrderByInput!]
      cursor: AnswerWhereUniqueInput
      distinct: [AnswerScalarFieldEnum!]
      skip: Int
      take: Int
    ): AnswerListResponse!
  }
extend type Mutation {
    createOneAnswer(data: AnswerCreateInput!): AnswerResponse!
    updateOneAnswer(
      where: AnswerWhereUniqueInput!
      data: AnswerUpdateInput!
    ): AnswerResponse!
  }