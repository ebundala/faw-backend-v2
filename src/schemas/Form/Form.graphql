type Form {
          id: String!
          title: String!
          description: String
          state: State!
          author: User!
          authorId: String!
          tags(where: TagWhereInput
              orderBy: [TagOrderByInput!]
              cursor: TagWhereUniqueInput
              take: Int
              skip: Int
              distinct: [TagScalarFieldEnum!]
              ): [Tag!]!
          grades(where: GradeWhereInput
              orderBy: [GradeOrderByInput!]
              cursor: GradeWhereUniqueInput
              take: Int
              skip: Int
              distinct: [GradeScalarFieldEnum!]
              ): [Grade!]!
          responses(where: ResponseWhereInput
              orderBy: [ResponseOrderByInput!]
              cursor: ResponseWhereUniqueInput
              take: Int
              skip: Int
              distinct: [ResponseScalarFieldEnum!]
              ): [Response!]!
          attachments(where: AttachmentWhereInput
              orderBy: [AttachmentOrderByInput!]
              cursor: AttachmentWhereUniqueInput
              take: Int
              skip: Int
              distinct: [AttachmentScalarFieldEnum!]
              ): [Attachment!]!
          createdAt: DateTime!
          updatedAt: DateTime!
          tagId: String
    }

      type FormListResponse {
        status: Boolean!
        data: [Form!]
        message: String!
      }
     

      type FormResponse {
        status: Boolean!
        data: Form
        message: String!
      }
      
      type FormBatchResponse {
        status: Boolean!
        data: BatchPayload
        message: String!
      }
      type AggregateFormResponse {
        status: Boolean!
        data: AggregateForm
        message: String!
      }
      type FormCountResponse {
        status: Boolean!
        data: Int
        message: String!
      }
      extend type Query {
    findUniqueForm(where: FormWhereUniqueInput!): FormResponse!
    findManyForm(
      where: FormWhereInput
      orderBy: [FormOrderByInput!]
      cursor: FormWhereUniqueInput
      distinct: [FormScalarFieldEnum!]
      skip: Int
      take: Int
    ): FormListResponse!
  }
extend type Mutation {
    createOneForm(data: FormCreateInput!): FormResponse!
    updateOneForm(
      where: FormWhereUniqueInput!
      data: FormUpdateInput!
    ): FormResponse!
  }